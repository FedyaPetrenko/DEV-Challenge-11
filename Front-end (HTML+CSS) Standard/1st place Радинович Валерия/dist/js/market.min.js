"use strict";!function(){$(function(){$.each($(".site__menu"),function(){new o($(this))}),$.each($(".location-city"),function(){new e($(this))}),$.each($(".location__map"),function(){new n($(this))}),$.each($(".recent-markets__slider"),function(){new t($(this))}),$.each($(".hero"),function(){new i($(this))})});var o=function(o){var e=this,n=o,t=$("body"),i=$(window),s=$(".site__menu-btn"),a=function(){s.on({click:function(){c($(this))}}),i.on({resize:function(){}})},c=function(o){var e=o;e.hasClass("opened")?(e.removeClass("opened"),n.removeClass("opened"),t.css({overflow:"visible"})):(e.addClass("opened"),n.addClass("opened"),t.css({overflow:"hidden"}))},d=function(){n[0].obj=e,a()};d()},e=function(o){var e=this,n=o,t=n.find(".location-city__selected"),i=function(){t.on({click:function(){s($(this))}}),$(document).on("click",".location-city",function(o){o=o||window.event,o.stopPropagation?o.stopPropagation():o.cancelBubble=!0}),$(document).on("click","body",function(){n.removeClass("opened")})},s=function(o){var e=o;e.parent().hasClass("opened")?e.parent().removeClass("opened"):e.parent().addClass("opened")},a=function(){n[0].obj=e,i()};a()},n=function(o){this.obj=o,this.mapWrap=this.obj;var e,n=this,t=$(".contact__map-info"),i=(t.find(".contact__map-switcher-item"),[]),s=JSON.parse(this.mapWrap.attr("data-map")).marks,a=JSON.parse(this.mapWrap.attr("data-map")).zoom,c=function(){google.maps.event.addDomListener(window,"load",d)},d=function(){var o={zoom:a,scrollwheel:!1,center:new google.maps.LatLng(s[0].poi_latitude,s[0].poi_longitude)};e=new google.maps.Map(n.mapWrap[0],o),r()},r=function(){$.each(s,function(o){var n=this,t=new google.maps.LatLng(n.poi_latitude,n.poi_longitude);i[o]=new google.maps.Marker({position:t,map:e})})},l=function(){c()};l()},t=function(o){var e=o,n=function(){e.slick({arrows:!1,dots:!1,infinite:!1,speed:600,slidesToScroll:1,slidesToShow:3,centerMode:!1,centerPadding:0,touchThreshold:25,autoplay:!0,autoplaySpeed:3e3,responsive:[{breakpoint:500,settings:{slidesToShow:1}},{breakpoint:768,settings:{slidesToShow:2}},{breakpoint:992,settings:{slidesToShow:3}}]})},t=function(){n()};t()},i=function(o){var e=o,n=e.find(".hero__slider"),t=e.find(".hero__timeline"),i=function(){n.slick({arrows:!1,dots:!1,infinite:!1,speed:600,slidesToScroll:1,autoplay:!0,autoplaySpeed:3e3,slidesToShow:1,centerMode:!1,centerPadding:0,touchThreshold:25,asNavFor:t}),t.slick({arrows:!1,dots:!1,infinite:!1,speed:600,autoplay:!0,autoplaySpeed:3e3,asNavFor:n,slidesToScroll:1,slidesToShow:3,centerMode:!1,centerPadding:0,touchThreshold:25,responsive:[{breakpoint:500,settings:{slidesToShow:1}},{breakpoint:768,settings:{slidesToShow:2}},{breakpoint:992,settings:{slidesToShow:3}}]})},s=function(){i()};s()}}();
"use strict";!function(){$(function(){$.each($(".site__form"),function(){new n($(this))})});var n=function(n){var t=this,i=n,f=(i.find("fieldset"),i.find("input:not([readonly]), textarea")),o=function(){f.on({focusin:function(){a($(this))},focusout:function(){s($(this)),c($(this))}})},a=function(n){var t=n,i=t.parent();i.addClass("fill")},s=function(n){var t=n,i=t.parent();i.removeClass("fill")},c=function(n){var t=n,i=t.parent();""!=t.val()&&i.addClass("fill")},u=function(){i[0].obj=t,o(),f.each(function(){c($(this))})};u()}}();
//# sourceMappingURL=data:application/json;charset=utf8;base64,
